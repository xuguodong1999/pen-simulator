#include "az/core/config.h"

#include <spdlog/spdlog.h>

#include <unordered_map>
#include <unordered_set>
#include <string>

namespace az::data::impl::unicode {
    // see groupSimilarChars in www/playground/mathjax-fork-jit/index.ts
    std::unordered_map<UCharType, std::unordered_set<UCharType>> SIMILAR_CHAR_RECORD = {
            {"\"", {"\"", "“", "”",}},
            {"'",  {"'",  "‘", "’",}},
            {"(",  {"(",  "⟮",}},
            {")",  {")",  "⟯",}},
            {"*",  {"*",  "⋆",}},
            {"+",  {"+",  "†", "∔",}},
            {",",  {",",  "´", "ˊ", "′",}},
            {"-",  {"-",  "_", "¯", "ˉ", "–", "—", "―", "‾", "−", "￣",}},
            {".",  {".",  "·", "˙", "•", "∙", "⋅",}},
            {"/",  {"/",  "⁄", "∕", "⧸",}},
            {"1",  {"1",  "l", "Ⅰ", "∣", "⎜", "⎟", "⎢", "⎥", "⎪", "⏐",}},
            {"2",  {"2",  "Z", "z", "Ζ", "ℤ",}},
            {"6",  {"6",  "b", "♭",}},
            {"7",  {"7",  "",}},
            {"9",  {"9",}},
            {"<",  {"<",  "≺", "〈", "⟨", "〈",}},
            {"=",  {"=",  "‗",}},
            {">",  {">",  "≻", "〉", "⟩", "〉",}},
            {"A",  {"A",  "Α",}},
            {"B",  {"B",  "Β",}},
            {"C",  {"C",  "c", "∁",}},
            {"E",  {"E",  "Ε",}},
            {"H",  {"H",  "Η", "ℍ",}},
            {"I",  {"I",  "Ι",}},
            {"J",  {"J",  "ȷ",}},
            {"K",  {"K",  "k", "Κ", "κ", "",}},
            {"M",  {"M",  "Μ",}},
            {"N",  {"N",  "Ν", "ℕ",}},
            {"O",  {"O",  "o", "Ο", "ο", "◯", "",}},
            {"P",  {"P",  "p", "Ρ", "ρ", "ℙ",}},
            {"Q",  {"Q",  "ℚ",}},
            {"R",  {"R",  "ℝ",}},
            {"S",  {"S",  "s",}},
            {"T",  {"T",  "Τ", "⊤", "⊺",}},
            {"U",  {"U",  "u", "∐", "∪", "⋃", "",}},
            {"V",  {"V",  "v", "ν", "Ⅴ", "ⅴ", "∨", "⋁",}},
            {"W",  {"W",  "w", "ω", "𝜛", "𝝕",}},
            {"X",  {"X",  "x", "×", "Χ", "ϰ", "Ⅹ", "ⅹ", "⨯", "𝝒",}},
            {"Y",  {"Y",  "Υ", "γ", "⋎",}},
            {"\\", {"\\", "∖",}},
            {"^",  {"^",  "ˆ", "Λ", "⋀", "⋏",}},
            {"`",  {"`",  "ˋ", "‵",}},
            {"d",  {"d",  "ⅆ",}},
            {"e",  {"e",  "ⅇ",}},
            {"h",  {"h",  "ℎ",}},
            {"i",  {"i",  "ⅈ", "ⅰ",}},
            {"n",  {"n",  "∏", "∩", "⋂",}},
            {"q",  {"q",}},
            {"y",  {"y",  "𝑦",}},
            {"~",  {"~",  "˜", "∼",}},
            {"ˇ",  {"ˇ",  "˘",}},
            {"Δ",  {"Δ",  "∆", "△", "▵",}},
            {"Σ",  {"Σ",  "∑", "",}},
            {"Φ",  {"Φ",  "ϕ", "𝜙",}},
            {"α",  {"α",  "∝",}},
            {"ϵ",  {"ϵ",  "∈", "𝝐",}},
            {"‖",  {"‖",  "Ⅱ",}},
            {"…",  {"…",  "⋯",}},
            {"→",  {"→",  "⟶", "",}},
            {"∂",  {"∂",  "𝜕", "𝝏",}},
            {"∇",  {"∇",  "▽", "▿", "𝛁",}},
            {"∋",  {"∋",  "∍",}},
            {"⊕",  {"⊕",  "⨁",}},
            {"⊖",  {"⊖",  "⊝",}},
            {"⊗",  {"⊗",  "⨂",}},
            {"⊙",  {"⊙",  "⨀",}},

    };

    std::unordered_map<UCharType, UCharType> SIMILAR_CHAR_MAP = []() {
        std::unordered_map<UCharType, UCharType> result;
        for (const auto &[key, set]: SIMILAR_CHAR_RECORD) {
            for (const auto &item: set) {
                auto success = result.insert({item, key}).second;
                if (!success) {
                    SPDLOG_ERROR("failed to insert <{},{}>, <{},{}> already exist",
                                 item, key, item, result[item]);
                }
            }
        }
        return result;
    }();
}
