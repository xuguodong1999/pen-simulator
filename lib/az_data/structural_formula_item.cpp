#include "az/data/structural_formula_item.h"
#include "az/data/synthesis_tex_generator.h"
#include "az/chem/mol_graph.h"

#include <spdlog/spdlog.h>

#include <numeric>

using namespace az;
using namespace az::data;
using namespace az::chem;
using namespace az::pen;

static std::vector<LabelType> ELEMENTS{
        "None", "H", "He", "Li", "Be", "B", "C", "N", "O", "F", "Ne",
        "Na", "Mg", "Al", "Si", "P", "S", "Cl", "Ar", "K", "Ca",
        "Sc", "Ti", "V", "Cr", "Mn", "Fe", "Co", "Ni", "Cu", "Zn",
        "Ga", "Ge", "As", "Se", "Br", "Kr",
        "Rb", "Sr", "Y", "Zr", "Nb", "Mo", "Tc", "Ru", "Rh", "Pd", "Ag", "Cd",
        "In", "Sn", "Sb", "Te", "I", "Xe",
        "Cs", "Ba", "La", "Ce", "Pr", "Nd", "Pm", "Sm", "Eu", "Gd", "Tb", "Dy",
        "Ho", "Er", "Tm", "Yb", "Lu", "Hf", "Ta", "W", "Re", "Os", "Ir", "Pt",
        "Au", "Hg", "Tl", "Pb", "Bi", "Po", "At", "Rn", "Fr", "Ra", "Ac", "Th",
        "Pa", "U", "Np", "Pu", "Am", "Cm", "Bk", "Cf", "Es", "Fm", "Md", "No",
        "Lr", "Rf", "Db", "Sg", "Bh", "Hs", "Mt", "Ds", "Rg", "Cn"
};

static std::vector<LabelType> get_atom_pair(const Bond &bond) {
    return {
            ELEMENTS[bond.from->atomic_number],
            ELEMENTS[bond.to->atomic_number],
    };
}

static LabelType get_bond_annotation(const Bond &bond) {
    switch (bond.type) {
        case BondType::Single:
            return "single";
        case BondType::Double:
        case BondType::DoubleZ:
        case BondType::DoubleE:
            return "double";
        case BondType::Triple:
            return "triple";
        case BondType::SolidWedge:
            return "solid";
        case BondType::DashWedge:
            return "dash";
        case BondType::Wave:
            return "wave";
        case BondType::Delocalized:
        case BondType::Circle:
            return "delocalized";
        case BondType::None:
        default:
            throw std::runtime_error(fmt::format("unknown bond type: {}", (int64_t) bond.type));
    }
}


void StructuralFormulaItem::create_from_format(
        const ShapeProvider &shape_provider,
        std::string_view input,
        std::string_view format,
        bool force_show_carbon
) {
    mol_graph->from_format(input, format);
    mol_graph->generate_2d();
    auto &items = this->data->data;
    auto &infos = this->data->extra;
    ScalarType bond_mean = 88;
    if (mol_graph->bond_count() > 0) {
        // firstly, we calculate average item distance generated by molecule 2d renderer
        std::vector<ScalarType> bond_lengths;
        bond_lengths.reserve(mol_graph->bond_count());
        mol_graph->traverse([&](const Atom &atom) {
        }, [&](const Bond &bond) {
            auto &from = bond.from->center_2d;
            auto &to = bond.to->center_2d;
            bond_lengths.push_back(get_distance(from, to));
        });
        bond_mean = vector_mean<ScalarType>(bond_lengths);
    }
    bond_mean = std::clamp(bond_mean, ScalarType{0.1}, ScalarType{1024});
    const ScalarType TEXT_RATIO = 0.333; // less than 0.5
    mol_graph->traverse([&](const Atom &atom) {
        if (6 == atom.atomic_number && !force_show_carbon && mol_graph->atom_count() > 1) { return; }
        auto &display_text = ELEMENTS[atom.atomic_number];
        auto pen_atom = SynthesisTexGenerator::generate_sub_string(display_text, shape_provider);
        ScalarType size = bond_mean * TEXT_RATIO * 2;
        pen_atom->fit_into_keep_ratio(size, size);
        pen_atom->move_center_to(atom.center_2d);
        auto info = std::make_shared<PenItemInfo>();
        info->origin_label = display_text;
        infos.push_back(info);
        items.push_back(pen_atom);
    }, [&](const Bond &bond) {
        std::shared_ptr<PenOp> bond_item;
        const auto &from = bond.from->center_2d;
        const auto &to = bond.to->center_2d;
        bool show_from = force_show_carbon || bond.from->atomic_number != 6;
        bool show_to = force_show_carbon || bond.to->atomic_number != 6;
        auto offset = (to - from) * TEXT_RATIO;
        auto adjusted_from = show_from ? from + offset : from;
        auto adjusted_to = show_to ? to - offset : to;
        switch (bond.type) {
            case BondType::Single:
                bond_item = PenBondFactory::make_line_bond(
                        shape_provider,
                        adjusted_from,
                        adjusted_to,
                        1
                );
                break;
            case BondType::Double:
            case BondType::DoubleZ:
            case BondType::DoubleE:
                bond_item = PenBondFactory::make_line_bond(
                        shape_provider,
                        adjusted_from,
                        adjusted_to,
                        2
                );
                break;
            case BondType::Triple:
                bond_item = PenBondFactory::make_line_bond(
                        shape_provider,
                        adjusted_from,
                        adjusted_to,
                        3
                );
                break;
            case BondType::SolidWedge:
                bond_item = PenBondFactory::make_solid_wedge_bond(
                        shape_provider,
                        adjusted_from,
                        adjusted_to
                );
                break;
            case BondType::DashWedge:
                bond_item = PenBondFactory::make_dash_wedge_bond(
                        shape_provider,
                        adjusted_from,
                        adjusted_to
                );
                break;
            case BondType::Wave:
                bond_item = PenBondFactory::make_wave_bond(
                        shape_provider,
                        adjusted_from,
                        adjusted_to
                );
                break;
            case BondType::Delocalized:
            case BondType::Circle:
                throw std::runtime_error("circle bond not implemented yet, refer to COCR soon.");
            case BondType::None:
                throw std::runtime_error(fmt::format("unknown bond type: {}", (int64_t) bond.type));
        }
        auto info = std::make_shared<PenItemInfo>();
        info->atom_pair = get_atom_pair(bond);
        info->origin_label = get_bond_annotation(bond);
        infos.push_back(info);
        items.push_back(bond_item);
    });
}

StructuralFormulaItem::StructuralFormulaItem() : mol_graph(std::make_shared<MolGraph>()) {
}
